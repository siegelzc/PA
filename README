Debugging Tool for Assembly/Verilog

Architecture
~~~~~~~~~~~~

- memory is byte addressable

- words are 16 bits

- 16 register names r0, r1, ..., r15 (16 bits each)

    - r0 is special:
    * reading from r0 always returns 0
    * writing to r0 interprets the the least significant
    8 bits as an ASCII code and prints that character

    - all instructions are 16 bit wide

    encoding          instruction   description

    0000aaaabbbbtttt  sub rt,ra,rb  regs[t] = regs[a] - regs[b]
    0001aaaabbbbtttt  add rt,ra,rb  regs[t] = regs[a] + regs[b]
    0001aaaabbbbtttt  mul rt,ra,rb  regs[t] = regs[a] * regs[b]

    1000iiiiiiiitttt  movl rt,i     regs[t] = sign_extend(i)
    1001iiiiiiiitttt  movh rt,i     regs[t] = (regs[t] & 0xff) | (i << 8)

    1011aaaa0000tttt  mov rt,ra     regs[t] = reg[a]
    1011aaaa0001tttt  swp rt,ra     regs[t] = reg[a], regs[a] = regs[t]
    
    1110aaaa0000tttt  jz rt,ra      pc = (regs[ra] == 0) ? regs[rt] : pc + 2
    1110aaaa0001tttt  jnz rt,ra     pc = (regs[ra] != 0) ? regs[rt] : pc + 2
    1110aaaa0010tttt  js rt,ra      pc = (regs[ra] < 0) ? regs[rt] : pc + 2
    1110aaaa0011tttt  jns rt,ra     pc = (regs[ra] >= 0) ? regs[rt] : pc + 2

    1111aaaa0000tttt  ld rt,ra      regs[t] = mem[regs[a]]
    1111aaaa0001tttt  st rt,ra      mem[regs[a]] = regs[t]

